The Project Marking Problem
Harry Mumford-Turner

1. How you solved the problem of synchronizing your threads.
- For synchronizing threads
  - Single Mutex
  - Single condidition
  - Some global variables
    - Total number of markers available
    - Total number of students finished
    - A list of states for each marker, busy | idle
    - A list of states for each demo, on | off
    - A list of markers a student has grabbed

- Add if (err) { conditions! }
  - Added around the starting and ending of threads

2. Why your method is correct (or how it could be made correct).

3. Why your method is efficient (or how it could be improved).
- : Use signal instead of broadcast??
-- using a producer-consumer model? Maybe use a queue??? Marker is producer, student is consumer
  - Using Semaphores! number_of_available_markers into a semaphore?

Do not include any program trace output in your report. Instead, you need to give a
convincing argument in English why your program is correct and efficient, or how it could
be improved.

(max 5000 characters)


- Never use Busy waiting, is while(x) { lock(); if(y)x = false; unlock(); } NEVER DO THIS IN THE CW. Instead be asleep


- DATARACES ARE BAD
- IF YOU WANT TO HAVE SOMETHING YOU WANT TO WAIT FOR, YOU WANT TO LOCK OR WAIT UNTIL SOMEONE HAS CLEARED IT OUT FOR YOU
- ALTERNATIVE METHOD IS TO USE SEMAPHORES!



arr_markers[MARKER_ID] = STUDENT_ID // If -2 then finished jobs, if -1 then available, if positive 0+ then STUDENT_ID

RUN MAKE TESTS TO DO TESTS!